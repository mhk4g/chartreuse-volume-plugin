/*
 ==============================================================================
 
 This file was auto-generated by the Introjucer!
 
 It contains the basic framework code for a JUCE plugin editor.
 
 ==============================================================================
 */

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
Mu45effectAudioProcessorEditor::Mu45effectAudioProcessorEditor (Mu45effectAudioProcessor& p)
: AudioProcessorEditor (&p), processor (p)
{
    // MU4545_DO_THIS: Create your sliders
    volumeSlider = new Slider ("Volume Slider");
    volumeSlider->setRange(processor.volumeParam->getActualMinimum(),
                           processor.volumeParam->getActualMaximum(),
                           0.5);
    volumeSlider->setSliderStyle(Slider::LinearBarVertical);
    volumeSlider->setTextValueSuffix(processor.volumeParam->getLabel());
    volumeSlider->setTextBoxStyle(Slider::TextBoxBelow, false, 60, 20);
    volumeSlider->addListener (this);
    volumeSlider->setColour(Slider::thumbColourId, Colours::chartreuse);
    addAndMakeVisible(volumeSlider);

    // MU4545_DO_THIS: Create your sliders
    balanceSlider = new Slider ("Balance Slider");
    balanceSlider->setRange(processor.balanceParam->getActualMinimum(),
                           processor.balanceParam->getActualMaximum(),
                           0.5);
    balanceSlider->setSliderStyle(Slider::Rotary);
    balanceSlider->setTextValueSuffix(processor.balanceParam->getLabel());
    balanceSlider->setTextBoxStyle(Slider::TextBoxBelow, false, 60, 20);
    balanceSlider->addListener (this);
//    balanceSlider->setColour(Slider::backgroundColourId, Colours::cornsilk);
    balanceSlider->setColour(Slider::rotarySliderFillColourId, Colours::chartreuse);
    addAndMakeVisible(balanceSlider);
    
    // Make sure that before the constructor has finished, you've set the
    // editor's size to whatever you need it to be.
    setSize (300, 475);
    startTimer(100);    // This sets how often (in msec) the timerCallback() gets called.
}

Mu45effectAudioProcessorEditor::~Mu45effectAudioProcessorEditor()
{
}

//==============================================================================
void Mu45effectAudioProcessorEditor::paint (Graphics& g)
{
    g.fillAll (Colours::chartreuse);
    g.setFillType(Colours::white);
    g.fillRoundedRectangle(12, 12, 276, 276, 15);

    g.setColour(Colours::black);
    g.setFont (18.0f);
    g.drawFittedText("Volume", 54, 250, 50, 30, Justification::centred, 1);
    g.drawFittedText("Balance", 190, 250, 50, 30, Justification::centred, 1);
    g.drawFittedText("XXTREME CHARTREUSE VOLUME", 10, 5, 280, 40, Justification::centred, 1);

    g.setFont (10.0f);
    g.drawFittedText("Uncle Trixx 2016 Version 1.1.1.0", 10, 31, 280, 15, Justification::centred, 1);
    g.drawFittedText("WARNING: pregnant women should not use Uncle Trixx's XXTREME CHARTREUSE VOLUME plugin for extended periods of time. WARNING: Uncle Trixx's XXTREME CHARTREUSE VOLUME plugin has been known to cause cancer in mice. WARNING: Do NOT use Uncle Trixx's XXTREME CHARTREUSE VOLUME plugin in combination with any other plugins including Uncle Trixx's XXTRAVAGANT PERIWINKLE GATED 'VERB plugin, Uncle Trixx's MAXXIMUM 'TUDE ULTRAVIOLET E.Q. plugin, or the now-illegal Uncle Trixx's EXX-CATHEDRA HEGEMONIC HELIOTROPE TUNER plugin. WARNING: Uncle Trixx's XXTREME CHARTREUSE VOLUME plugin was manufactured in a facility that processes peanuts. WARNING: If you experience side effects after prolonged use of Uncle Trixx's XXTREME CHARTREUSE VOLUME PLUGIN such as exhaustion, depression, drymouth, nausea, euphoria and/or dysphoria, or the inability to meet a child's gaze, discontinue use of Uncle Trixx's XXTREME CHARTREUSE VOLUME plugin immediately and consult a physician.", 10, 290, 280, 180, Justification::centred, 20);
}

void Mu45effectAudioProcessorEditor::resized()
{
    //MU4545_DO_THIS: Set the location in the GUI for each UI component
    int w = 55; int h = 200; int x = 50; int y = 50;
    volumeSlider->setBounds(x, y, w, h);

    w = 110; h = 200; x = 160; y = 30;
    balanceSlider->setBounds(x, y, w, h);
}

// This gets called whenever the user moves a slider
void Mu45effectAudioProcessorEditor::sliderValueChanged(Slider* slider)
{
    PluginParameter* parameter = nullptr;
    
    // MU4545_DO_THIS: make an "else if" for each slider
    if (slider == volumeSlider) {
        parameter = processor.volumeParam;
    }
    else if (slider == balanceSlider) {
        parameter = processor.balanceParam;
    }
    
    if (parameter != nullptr) {
        parameter->setValueNotifyingHost(parameter->calculateValue(slider->getValue()));
    }
    
}

// This gets called every N msec so that sliders can update their value if the host
// changed them using parameter automation
void Mu45effectAudioProcessorEditor::timerCallback()
{
    //MU4545_DO_THIS: Update the value of each slider to match the value in the Processor
    volumeSlider->setValue(processor.volumeParam->getActualValue(), dontSendNotification);
}



