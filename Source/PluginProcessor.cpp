/*
 ==============================================================================
 
 This file was auto-generated by the Introjucer!
 
 It contains the basic framework code for a JUCE plugin processor.
 
 ==============================================================================
 */

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
Mu45effectAudioProcessor::Mu45effectAudioProcessor()
{
    //MU4545_DO_THIS: Create and initialize a PluginParameter for each user parameter
    volumeParam = new PluginParameter("volume",     // parameterId
                                      0.0,        // actualDefaultValue
                                      -96.0,        // actualMinimum
                                      6.0,      // actualMaximum
                                      "Volume",   // parameterName
                                      "dB"); // parameterLabel, can also be String::empty
    addParameter(volumeParam); // Add the param to a list that the Processor keeps.

    balanceParam = new PluginParameter("balance",     // parameterId
                                      0.0,        // actualDefaultValue
                                      -50.0,        // actualMinimum
                                      50.0,      // actualMaximum
                                      "Balance",   // parameterName
                                      "!!!"); // parameterLabel, can also be String::empty
    addParameter(balanceParam); // Add the param to a list that the Processor keeps.
    
}

Mu45effectAudioProcessor::~Mu45effectAudioProcessor()
{
}

//==============================================================================
const String Mu45effectAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

bool Mu45effectAudioProcessor::acceptsMidi() const
{
#if JucePlugin_WantsMidiInput
    return true;
#else
    return false;
#endif
}

bool Mu45effectAudioProcessor::producesMidi() const
{
#if JucePlugin_ProducesMidiOutput
    return true;
#else
    return false;
#endif
}

bool Mu45effectAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double Mu45effectAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int Mu45effectAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
    // so this should be at least 1, even if you're not really implementing programs.
}

int Mu45effectAudioProcessor::getCurrentProgram()
{
    return 0;
}

void Mu45effectAudioProcessor::setCurrentProgram (int index)
{
}

const String Mu45effectAudioProcessor::getProgramName (int index)
{
    return String();
}

void Mu45effectAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void Mu45effectAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // MU4545_DO_THIS: Use this method as the place to do any pre-playback
    // initialisation that you need..
    volumeGain = 0.0;
    balance = 0.0;
    
}

void Mu45effectAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

// MU4545_DO_THIS: Here is where we calculate the algorithm parameter values
// from the user parameter values
void Mu45effectAudioProcessor::calcAlgorithmParams()
{
    volumeGain = std::pow(10, (volumeParam->getActualValue() / 20.0));
    balance = balanceParam->getActualValue();
}

void Mu45effectAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    // In case we have more outputs than inputs, this code clears any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    // I've added this to avoid people getting screaming feedback
    // when they first compile the plugin, but obviously you don't need to
    // this code if your algorithm already fills all the output channels.
    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
        buffer.clear (i, 0, buffer.getNumSamples());
    
    // Before we process a buffer, update the algorithm params
    calcAlgorithmParams();
    
    // This version assumes we always have 2 channels
    float* left = buffer.getWritePointer (0);
    float* right = buffer.getWritePointer (1);
    const int numSamps = buffer.getNumSamples();
    
    // MU4545_DO_THIS: This is the "inner loop" where we calculate each output sample
    for (int samp = 0; samp < numSamps; samp++)
    {
        left[samp] = volumeGain * left[samp] * (50 - balance) / 100;
        right[samp] = volumeGain * right[samp] * (50 + balance) / 100;
    }
}

//==============================================================================
bool Mu45effectAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* Mu45effectAudioProcessor::createEditor()
{
    return new Mu45effectAudioProcessorEditor (*this);
}

//==============================================================================
void Mu45effectAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void Mu45effectAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new Mu45effectAudioProcessor();
}
